{
  "compilerOptions": {
    "target": "ESNext", // 目标语言的版本
    "useDefineForClassFields": true, //此标志用作迁移到即将推出的类字段标准版本的一部分
    "module": "ESNext", // 生成代码的模板标准
    "moduleResolution": "Node", // 模块解析策略，ts默认用node的解析策略
    "importHelpers": true, //是否将辅助函数从 tslib 模块导入
    "strict": true, // 开启所有严格的类型检查
    "allowSyntheticDefaultImports": true, //允许从没有默认导出的模块中进行默认导入
    "forceConsistentCasingInFileNames": true, //是否区分文件系统大小写规则
    "strictFunctionTypes": false, // 不允许函数参数双向协变
    "jsx": "preserve", //生成代码中会保留JSX以供后续的转换操作使用(比如：Babel).另外,输出文件会带有.jsx扩展名。
    "allowJs": true, // 允许编译器编译JS，JSX文件
    "sourceMap": true, // 生成目标文件的sourceMap文件
    "resolveJsonModule": true, //是否解析 JSON 模块
    "isolatedModules": true, //是否将每个文件转换为单独的模块
    "esModuleInterop": true, // 允许export=导出，由import from 导入
    "noUnusedLocals": true, // 检查只声明、未使用的局部变量(只提示不报错)
    "noUnusedParameters": true, // 检查未使用的函数参数(只提示不报错)
    "noFallthroughCasesInSwitch": true, // 防止switch语句贯穿(即如果没有break语句后面不会执行)
    "noImplicitReturns": true, //每个分支都会有返回值
    "experimentalDecorators": true, //是否启用对装饰器的实验性支持，装饰器是一种语言特性
    "lib": ["ESNext", "DOM"], // TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array",
    "noImplicitAny": true, // 不允许隐式的any类型
    "removeComments": true, // 删除注释
    "skipLibCheck": true, //是否跳过声明文件的类型检查，这可以在编译期间以牺牲类型系统准确性为代价来节省时间
    "incremental": true, // TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度
    "types": ["vite/client", "node"], // 加载的声明文件包
    "baseUrl": ".", // 解析非相对模块的基地址，默认是当前目录
    "paths": {
      // 路径映射，相对于baseUrl
      "@/*": ["src/*"]
    },
    "typeRoots": ["./node_modules/@types/", "./types"] // 声明文件目录，默认时node_modules/@types
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "types/**/*.ts",
    "types/**/*.d.ts",
    "build/**/*.ts",
    "build/**/*.d.ts"
  ], //编译需要编译的文件或目录
  "exclude": ["node_modules", "dist", "**/*.js"], //编译器需要排除的文件或文件夹
  "references": [{ "path": "./tsconfig.node.json" }]
}
